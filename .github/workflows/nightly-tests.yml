name: nightly-tests
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on:
  pull_request: { types: [opened, reopened, synchronize] }
  push: { branches: [main] }
  schedule:
    - cron: "0 6 * * 6"

defaults:
  run:
    shell: bash --noprofile --norc -e -u -o pipefail {0}

jobs:
  linux-nightly-tests:
    strategy:
      fail-fast: false
      matrix:
        swift-image:
          - name: swiftlang/swift:nightly-main-jammy
        config:
          - mode: "debug"
          - mode: "release"

    runs-on: ubuntu-latest

    container: ${{ matrix.swift-image.name }}

    timeout-minutes: 15

    steps:
      - name: Check out ${{ github.event.repository.name }}
        uses: actions/checkout@v5

      - name: Install zstd for faster caching, and curl for codecov action
        run: |
          apt-get update -y
          apt-get install -y zstd curl

      - name: Restore .build
        if: ${{ runner.debug != '1' }}
        id: "restore-cache"
        uses: actions/cache/restore@v4
        with:
          path: .build
          key: "${{ github.event.repository.name }}-nightly-unit-tests-${{ matrix.config.mode }}-build-${{ matrix.swift-image.name }}-${{ runner.os }}-${{ hashFiles('./Package.resolved') }}"
          restore-keys: "${{ github.event.repository.name }}-nightly-unit-tests-${{ matrix.config.mode }}-build-${{ matrix.swift-image.name }}-${{ runner.os }}-"

      - name: Build ${{ github.event.repository.name }}
        run: |
          # keeping code coverage flag to check for regressions
          swift build \
            --build-tests \
            --enable-code-coverage \
            -Xswiftc -require-explicit-sendable \
            -c ${{ matrix.config.mode }}

      - name: Cache .build
        if: steps.restore-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: .build
          key: "${{ github.event.repository.name }}-nightly-unit-tests-${{ matrix.config.mode }}-build-${{ matrix.swift-image.name }}-${{ runner.os }}-${{ hashFiles('./Package.resolved') }}"

      - name: Run tests
        run: |
          # keeping code coverage flag to check for regressions
          swift test \
            --skip-build \
            --enable-code-coverage \
            -Xswiftc -require-explicit-sendable \
            -c ${{ matrix.config.mode }}

  macos-nightly-tests:
    strategy:
      fail-fast: false
      matrix:
        macos:
          - version: macos-15
          - version: macos-26
        xcode:
          - version: latest-stable
        swift:
          - version: 6.2-snapshot
        config:
          - mode: "debug"
          - mode: "release"

    runs-on: ${{ matrix.macos.version }}

    timeout-minutes: 20

    steps:
      - name: Setup appropriate Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.xcode.version }}

      - name: Check out ${{ github.event.repository.name }}
        uses: actions/checkout@v5

      - name: Update swift via Swiftly
        run: |
          # Installation commands from https://www.swift.org/install/macos
          curl -O https://download.swift.org/swiftly/darwin/swiftly.pkg
          installer -pkg swiftly.pkg -target CurrentUserHomeDirectory
          ~/.swiftly/bin/swiftly init --assume-yes --skip-install --quiet-shell-followup
          . "${SWIFTLY_HOME_DIR:-$HOME/.swiftly}/env.sh"
          hash -r

          # Update environment variables
          echo "SWIFTLY_HOME_DIR=${SWIFTLY_HOME_DIR}" >>"${GITHUB_ENV}"
          echo "SWIFTLY_BIN_DIR=${SWIFTLY_BIN_DIR}" >>"${GITHUB_ENV}"
          echo "${SWIFTLY_BIN_DIR}" >>"${GITHUB_PATH}"

          # Update swift
          swiftly install --assume-yes ${{ matrix.swift.version }}
          swiftly use --assume-yes ${{ matrix.swift.version }}
          hash -r

      - name: Restore .build
        if: ${{ runner.debug != '1' }}
        id: "restore-cache"
        uses: actions/cache/restore@v4
        with:
          path: .build
          key: "${{ github.event.repository.name }}-unit-tests-${{ matrix.config.mode }}-build-${{ matrix.swift.version }}-${{ runner.os }}-${{ hashFiles('./Package.resolved') }}"
          restore-keys: "${{ github.event.repository.name }}-unit-tests-${{ matrix.config.mode }}-build-${{ matrix.swift.version }}-${{ runner.os }}-"

      - name: Build ${{ github.event.repository.name }}
        run: |
          swift build \
            --build-tests \
            --enable-code-coverage \
            -Xswiftc -require-explicit-sendable \
            -c ${{ matrix.config.mode }}

      - name: Cache .build
        if: steps.restore-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: .build
          key: "${{ github.event.repository.name }}-unit-tests-${{ matrix.config.mode }}-build-${{ matrix.swift.version }}-${{ runner.os }}-${{ hashFiles('./Package.resolved') }}"

      - name: Run tests
        run: |
          # keeping code coverage flag to check for regressions
          swift test \
            --skip "IntegrationTests." \
            --skip-build \
            --enable-code-coverage \
            -Xswiftc -require-explicit-sendable \
            -c ${{ matrix.config.mode }}
