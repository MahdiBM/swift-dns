// This file is generated by the utils/IDNATestV2Generator.swift script.
// It contains the IDNA Test V2 cases for testing UTS #46 conformance.

import CSwiftDNSIDNATesting
import Foundation

/// Represents a single test case from the IDNA Test V2 specification
struct IDNATestV2Case: Sendable {
    /// The source string to be tested
    let source: String
    /// The result of applying toUnicode to the source, with Transitional_Processing=false
    let toUnicode: String
    /// A set of status codes for toUnicode operation
    let toUnicodeStatus: [String]
    /// The result of applying toASCII to the source, with Transitional_Processing=false
    let toAsciiN: String
    /// A set of status codes for toAsciiN operation
    let toAsciiNStatus: [String]
    /// The result of applying toASCII to the source, with Transitional_Processing=true
    let toAsciiT: String
    /// A set of status codes for toAsciiT operation
    let toAsciiTStatus: [String]

    init(from cCase: IDNATestV2CCase) {
        self.source = String(cString: cCase.source)
        self.toUnicode = String(cString: cCase.toUnicode)
        self.toAsciiN = String(cString: cCase.toAsciiN)
        self.toAsciiT = String(cString: cCase.toAsciiT)
        self.toUnicodeStatus = Array(
            UnsafeBufferPointer(
                start: cCase.toUnicodeStatus!,
                count: Int(cCase.toUnicodeStatusCount)
            )
        ).map {
            String(cString: $0!)
        }
        self.toAsciiNStatus = Array(
            UnsafeBufferPointer(
                start: cCase.toAsciiNStatus!,
                count: Int(cCase.toAsciiNStatusCount)
            )
        ).map {
            String(cString: $0!)
        }
        self.toAsciiTStatus = Array(
            UnsafeBufferPointer(
                start: cCase.toAsciiTStatus!,
                count: Int(cCase.toAsciiTStatusCount)
            )
        ).map {
            String(cString: $0!)
        }
    }

    static func allCases() -> [IDNATestV2Case] {
        var count: Int = 0
        guard let ptr = idna_test_v2_all_cases(&count) else {
            fatalError("Failed to get IDNA Test V2 cases")
        }
        return (0..<count).map { i in IDNATestV2Case(from: ptr[i]) }
    }
}
